# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  pulsar:
    image: apachepulsar/pulsar
    container_name: pulsar
    command: >
      /pulsar/bin/pulsar standalone
    ports:
      - ${PUBLIC_PORT_PULSAR}:6650
    restart: always

  postgres:
    image: postgres
    container_name: postgres
    ports:
      - ${PUBLIC_PORT_POSTGRES}:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin4:
    image: dpage/pgadmin4
    container_name: pgadmin4
    restart: always
    depends_on:
      - postgres
    ports:
      - ${PUBLIC_PORT_PGADMIN4}:80
    environment:
      PGADMIN_DEFAULT_EMAIL: thomas-laurenz.schulte@eurogate.eu
      PGADMIN_DEFAULT_PASSWORD: password

  mongo:
    image: mongo
    container_name: mongodb
    restart: always
    ports:
      - ${PUBLIC_PORT_MONGODB}:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: always
    ports:
      - ${PUBLIC_PORT_MONGO_EXPRESS}:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://root:password@mongo:27017/
      ME_CONFIG_BASICAUTH: false

#  server:
#    build:
#      context: .
#    environment:
#      NODE_ENV: production
#    ports:
#      - 3000:3000

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

